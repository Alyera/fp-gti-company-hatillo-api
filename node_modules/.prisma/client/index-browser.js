
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.11.0
 * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
 */
Prisma.prismaVersion = {
  client: "5.11.0",
  engine: "efd2449663b3d73d637ea1fd226bafbcf45b3102"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.ClientScalarFieldEnum = {
  CUSTNMBR: 'CUSTNMBR',
  CUSTNAME: 'CUSTNAME',
  CUSTCLAS: 'CUSTCLAS',
  CPRCSTNM: 'CPRCSTNM',
  CNTCPRSN: 'CNTCPRSN',
  STMTNAME: 'STMTNAME',
  SHRTNAME: 'SHRTNAME',
  ADRSCODE: 'ADRSCODE',
  UPSZONE: 'UPSZONE',
  SHIPMTHD: 'SHIPMTHD',
  TAXSCHID: 'TAXSCHID',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  COUNTRY: 'COUNTRY',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIP: 'ZIP',
  PHONE1: 'PHONE1',
  PHONE2: 'PHONE2',
  PHONE3: 'PHONE3',
  FAX: 'FAX',
  PRBTADCD: 'PRBTADCD',
  PRSTADCD: 'PRSTADCD',
  STADDRCD: 'STADDRCD',
  SLPRSNID: 'SLPRSNID',
  CHEKBKID: 'CHEKBKID',
  PYMTRMID: 'PYMTRMID',
  CRLMTTYP: 'CRLMTTYP',
  CRLMTAMT: 'CRLMTAMT',
  CRLMTPER: 'CRLMTPER',
  CRLMTPAM: 'CRLMTPAM',
  CURNCYID: 'CURNCYID',
  RATETPID: 'RATETPID',
  CUSTDISC: 'CUSTDISC',
  PRCLEVEL: 'PRCLEVEL',
  MINPYTYP: 'MINPYTYP',
  MINPYDLR: 'MINPYDLR',
  MINPYPCT: 'MINPYPCT',
  FNCHATYP: 'FNCHATYP',
  FNCHPCNT: 'FNCHPCNT',
  FINCHDLR: 'FINCHDLR',
  MXWOFTYP: 'MXWOFTYP',
  MXWROFAM: 'MXWROFAM',
  COMMENT1: 'COMMENT1',
  COMMENT2: 'COMMENT2',
  USERDEF1: 'USERDEF1',
  USERDEF2: 'USERDEF2',
  TAXEXMT1: 'TAXEXMT1',
  TAXEXMT2: 'TAXEXMT2',
  TXRGNNUM: 'TXRGNNUM',
  BALNCTYP: 'BALNCTYP',
  STMTCYCL: 'STMTCYCL',
  BANKNAME: 'BANKNAME',
  BNKBRNCH: 'BNKBRNCH',
  SALSTERR: 'SALSTERR',
  DEFCACTY: 'DEFCACTY',
  RMCSHACC: 'RMCSHACC',
  RMARACC: 'RMARACC',
  RMSLSACC: 'RMSLSACC',
  RMIVACC: 'RMIVACC',
  RMCOSACC: 'RMCOSACC',
  RMTAKACC: 'RMTAKACC',
  RMAVACC: 'RMAVACC',
  RMFCGACC: 'RMFCGACC',
  RMWRACC: 'RMWRACC',
  RMSORACC: 'RMSORACC',
  FRSTINDT: 'FRSTINDT',
  INACTIVE: 'INACTIVE',
  HOLD: 'HOLD',
  CRCARDID: 'CRCARDID',
  CRCRDNUM: 'CRCRDNUM',
  CCRDXPDT: 'CCRDXPDT',
  KPDSTHST: 'KPDSTHST',
  KPCALHST: 'KPCALHST',
  KPERHIST: 'KPERHIST',
  KPTRXHST: 'KPTRXHST',
  NOTEINDX: 'NOTEINDX',
  CREATDDT: 'CREATDDT',
  MODIFDT: 'MODIFDT',
  Revalue_Customer: 'Revalue_Customer',
  Post_Results_To: 'Post_Results_To',
  FINCHID: 'FINCHID',
  GOVCRPID: 'GOVCRPID',
  GOVINDID: 'GOVINDID',
  DISGRPER: 'DISGRPER',
  DUEGRPER: 'DUEGRPER',
  DOCFMTID: 'DOCFMTID',
  Send_Email_Statements: 'Send_Email_Statements',
  USERLANG: 'USERLANG',
  GPSFOINTEGRATIONID: 'GPSFOINTEGRATIONID',
  INTEGRATIONSOURCE: 'INTEGRATIONSOURCE',
  INTEGRATIONID: 'INTEGRATIONID',
  ORDERFULFILLDEFAULT: 'ORDERFULFILLDEFAULT',
  CUSTPRIORITY: 'CUSTPRIORITY',
  CCode: 'CCode',
  DECLID: 'DECLID',
  RMOvrpymtWrtoffAcctIdx: 'RMOvrpymtWrtoffAcctIdx',
  SHIPCOMPLETE: 'SHIPCOMPLETE',
  CBVAT: 'CBVAT',
  INCLUDEINDP: 'INCLUDEINDP',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID',
  PAGE: 'PAGE'
};

exports.Prisma.ClientAccountsScalarFieldEnum = {
  CUSTNMBR: 'CUSTNMBR',
  ADRSCODE: 'ADRSCODE',
  SLPRSNID: 'SLPRSNID',
  UPSZONE: 'UPSZONE',
  SHIPMTHD: 'SHIPMTHD',
  TAXSCHID: 'TAXSCHID',
  CNTCPRSN: 'CNTCPRSN',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  COUNTRY: 'COUNTRY',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIP: 'ZIP',
  PHONE1: 'PHONE1',
  PHONE2: 'PHONE2',
  PHONE3: 'PHONE3',
  FAX: 'FAX',
  MODIFDT: 'MODIFDT',
  CREATDDT: 'CREATDDT',
  GPSFOINTEGRATIONID: 'GPSFOINTEGRATIONID',
  INTEGRATIONSOURCE: 'INTEGRATIONSOURCE',
  INTEGRATIONID: 'INTEGRATIONID',
  CCode: 'CCode',
  DECLID: 'DECLID',
  LOCNCODE: 'LOCNCODE',
  SALSTERR: 'SALSTERR',
  USERDEF1: 'USERDEF1',
  USERDEF2: 'USERDEF2',
  ShipToName: 'ShipToName',
  Print_Phone_NumberGB: 'Print_Phone_NumberGB',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.ClientsEmailScalarFieldEnum = {
  CUSTNMBR: 'CUSTNMBR',
  Email_Type: 'Email_Type',
  Email_Recipient: 'Email_Recipient',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.ProformaScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  ORIGTYPE: 'ORIGTYPE',
  ORIGNUMB: 'ORIGNUMB',
  DOCID: 'DOCID',
  DOCDATE: 'DOCDATE',
  GLPOSTDT: 'GLPOSTDT',
  QUOTEDAT: 'QUOTEDAT',
  QUOEXPDA: 'QUOEXPDA',
  ORDRDATE: 'ORDRDATE',
  INVODATE: 'INVODATE',
  BACKDATE: 'BACKDATE',
  RETUDATE: 'RETUDATE',
  ReqShipDate: 'ReqShipDate',
  FUFILDAT: 'FUFILDAT',
  ACTLSHIP: 'ACTLSHIP',
  DISCDATE: 'DISCDATE',
  DUEDATE: 'DUEDATE',
  REPTING: 'REPTING',
  TRXFREQU: 'TRXFREQU',
  TIMEREPD: 'TIMEREPD',
  TIMETREP: 'TIMETREP',
  DYSTINCR: 'DYSTINCR',
  DTLSTREP: 'DTLSTREP',
  DSTBTCH1: 'DSTBTCH1',
  DSTBTCH2: 'DSTBTCH2',
  USDOCID1: 'USDOCID1',
  USDOCID2: 'USDOCID2',
  DISCFRGT: 'DISCFRGT',
  ORDAVFRT: 'ORDAVFRT',
  DISCMISC: 'DISCMISC',
  ORDAVMSC: 'ORDAVMSC',
  DISAVAMT: 'DISAVAMT',
  ORDAVAMT: 'ORDAVAMT',
  DISCRTND: 'DISCRTND',
  ORDISRTD: 'ORDISRTD',
  DISTKNAM: 'DISTKNAM',
  ORDISTKN: 'ORDISTKN',
  DSCPCTAM: 'DSCPCTAM',
  DSCDLRAM: 'DSCDLRAM',
  ORDDLRAT: 'ORDDLRAT',
  DISAVTKN: 'DISAVTKN',
  ORDATKN: 'ORDATKN',
  PYMTRMID: 'PYMTRMID',
  PRCLEVEL: 'PRCLEVEL',
  LOCNCODE: 'LOCNCODE',
  BCHSOURC: 'BCHSOURC',
  BACHNUMB: 'BACHNUMB',
  CUSTNMBR: 'CUSTNMBR',
  CUSTNAME: 'CUSTNAME',
  CSTPONBR: 'CSTPONBR',
  PROSPECT: 'PROSPECT',
  MSTRNUMB: 'MSTRNUMB',
  PCKSLPNO: 'PCKSLPNO',
  PICTICNU: 'PICTICNU',
  MRKDNAMT: 'MRKDNAMT',
  ORMRKDAM: 'ORMRKDAM',
  PRBTADCD: 'PRBTADCD',
  PRSTADCD: 'PRSTADCD',
  CNTCPRSN: 'CNTCPRSN',
  ShipToName: 'ShipToName',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIPCODE: 'ZIPCODE',
  CCode: 'CCode',
  COUNTRY: 'COUNTRY',
  PHNUMBR1: 'PHNUMBR1',
  PHNUMBR2: 'PHNUMBR2',
  PHONE3: 'PHONE3',
  FAXNUMBR: 'FAXNUMBR',
  COMAPPTO: 'COMAPPTO',
  COMMAMNT: 'COMMAMNT',
  OCOMMAMT: 'OCOMMAMT',
  CMMSLAMT: 'CMMSLAMT',
  ORCOSAMT: 'ORCOSAMT',
  NCOMAMNT: 'NCOMAMNT',
  ORNCMAMT: 'ORNCMAMT',
  SHIPMTHD: 'SHIPMTHD',
  TRDISAMT: 'TRDISAMT',
  ORTDISAM: 'ORTDISAM',
  TRDISPCT: 'TRDISPCT',
  SUBTOTAL: 'SUBTOTAL',
  ORSUBTOT: 'ORSUBTOT',
  REMSUBTO: 'REMSUBTO',
  OREMSUBT: 'OREMSUBT',
  EXTDCOST: 'EXTDCOST',
  OREXTCST: 'OREXTCST',
  FRTAMNT: 'FRTAMNT',
  ORFRTAMT: 'ORFRTAMT',
  MISCAMNT: 'MISCAMNT',
  ORMISCAMT: 'ORMISCAMT',
  TXENGCLD: 'TXENGCLD',
  TAXEXMT1: 'TAXEXMT1',
  TAXEXMT2: 'TAXEXMT2',
  TXRGNNUM: 'TXRGNNUM',
  TAXSCHID: 'TAXSCHID',
  TXSCHSRC: 'TXSCHSRC',
  BSIVCTTL: 'BSIVCTTL',
  FRTSCHID: 'FRTSCHID',
  FRTTXAMT: 'FRTTXAMT',
  ORFRTTAX: 'ORFRTTAX',
  FRGTTXBL: 'FRGTTXBL',
  MSCSCHID: 'MSCSCHID',
  MSCTXAMT: 'MSCTXAMT',
  ORMSCTAX: 'ORMSCTAX',
  MISCTXBL: 'MISCTXBL',
  BKTFRTAM: 'BKTFRTAM',
  ORBKTFRT: 'ORBKTFRT',
  BKTMSCAM: 'BKTMSCAM',
  ORBKTMSC: 'ORBKTMSC',
  BCKTXAMT: 'BCKTXAMT',
  OBTAXAMT: 'OBTAXAMT',
  TXBTXAMT: 'TXBTXAMT',
  OTAXTAMT: 'OTAXTAMT',
  TAXAMNT: 'TAXAMNT',
  ORTAXAMT: 'ORTAXAMT',
  ECTRX: 'ECTRX',
  DOCAMNT: 'DOCAMNT',
  ORDOCAMT: 'ORDOCAMT',
  PYMTRCVD: 'PYMTRCVD',
  ORPMTRVD: 'ORPMTRVD',
  DEPRECVD: 'DEPRECVD',
  ORDEPRVD: 'ORDEPRVD',
  CODAMNT: 'CODAMNT',
  ORCODAMT: 'ORCODAMT',
  ACCTAMNT: 'ACCTAMNT',
  ORACTAMT: 'ORACTAMT',
  SALSTERR: 'SALSTERR',
  SLPRSNID: 'SLPRSNID',
  UPSZONE: 'UPSZONE',
  TIMESPRT: 'TIMESPRT',
  PSTGSTUS: 'PSTGSTUS',
  VOIDSTTS: 'VOIDSTTS',
  ALLOCABY: 'ALLOCABY',
  NOTEINDX: 'NOTEINDX',
  CURNCYID: 'CURNCYID',
  CURRNIDX: 'CURRNIDX',
  RATETPID: 'RATETPID',
  EXGTBLID: 'EXGTBLID',
  XCHGRATE: 'XCHGRATE',
  DENXRATE: 'DENXRATE',
  EXCHDATE: 'EXCHDATE',
  TIME1: 'TIME1',
  RTCLCMTD: 'RTCLCMTD',
  MCTRXSTT: 'MCTRXSTT',
  TRXSORCE: 'TRXSORCE',
  SOPHDRE1: 'SOPHDRE1',
  SOPHDRE2: 'SOPHDRE2',
  SOPLNERR: 'SOPLNERR',
  SOPHDRFL: 'SOPHDRFL',
  SOPMCERR: 'SOPMCERR',
  COMMNTID: 'COMMNTID',
  REFRENCE: 'REFRENCE',
  POSTEDDT: 'POSTEDDT',
  PTDUSRID: 'PTDUSRID',
  USER2ENT: 'USER2ENT',
  CREATDDT: 'CREATDDT',
  MODIFDT: 'MODIFDT',
  Tax_Date: 'Tax_Date',
  APLYWITH: 'APLYWITH',
  WITHHAMT: 'WITHHAMT',
  SHPPGDOC: 'SHPPGDOC',
  CORRCTN: 'CORRCTN',
  SIMPLIFD: 'SIMPLIFD',
  CORRNXST: 'CORRNXST',
  DOCNCORR: 'DOCNCORR',
  SEQNCORR: 'SEQNCORR',
  SALEDATE: 'SALEDATE',
  SOPHDRE3: 'SOPHDRE3',
  EXCEPTIONALDEMAND: 'EXCEPTIONALDEMAND',
  Flags: 'Flags',
  BackoutTradeDisc: 'BackoutTradeDisc',
  OrigBackoutTradeDisc: 'OrigBackoutTradeDisc',
  GPSFOINTEGRATIONID: 'GPSFOINTEGRATIONID',
  INTEGRATIONSOURCE: 'INTEGRATIONSOURCE',
  INTEGRATIONID: 'INTEGRATIONID',
  SOPSTATUS: 'SOPSTATUS',
  SHIPCOMPLETE: 'SHIPCOMPLETE',
  DIRECTDEBIT: 'DIRECTDEBIT',
  WorkflowApprStatCreditLm: 'WorkflowApprStatCreditLm',
  WorkflowPriorityCreditLm: 'WorkflowPriorityCreditLm',
  WorkflowApprStatusQuote: 'WorkflowApprStatusQuote',
  WorkflowPriorityQuote: 'WorkflowPriorityQuote',
  Workflow_Status: 'Workflow_Status',
  ContractExchangeRateStat: 'ContractExchangeRateStat',
  Print_Phone_NumberGB: 'Print_Phone_NumberGB',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.ProformaDetailScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  LNITMSEQ: 'LNITMSEQ',
  CMPNTSEQ: 'CMPNTSEQ',
  ITEMNMBR: 'ITEMNMBR',
  ITEMDESC: 'ITEMDESC',
  NONINVEN: 'NONINVEN',
  DROPSHIP: 'DROPSHIP',
  UOFM: 'UOFM',
  LOCNCODE: 'LOCNCODE',
  UNITCOST: 'UNITCOST',
  ORUNTCST: 'ORUNTCST',
  UNITPRCE: 'UNITPRCE',
  ORUNTPRC: 'ORUNTPRC',
  XTNDPRCE: 'XTNDPRCE',
  OXTNDPRC: 'OXTNDPRC',
  REMPRICE: 'REMPRICE',
  OREPRICE: 'OREPRICE',
  EXTDCOST: 'EXTDCOST',
  OREXTCST: 'OREXTCST',
  MRKDNAMT: 'MRKDNAMT',
  ORMRKDAM: 'ORMRKDAM',
  MRKDNPCT: 'MRKDNPCT',
  MRKDNTYP: 'MRKDNTYP',
  INVINDX: 'INVINDX',
  CSLSINDX: 'CSLSINDX',
  SLSINDX: 'SLSINDX',
  MKDNINDX: 'MKDNINDX',
  RTNSINDX: 'RTNSINDX',
  INUSINDX: 'INUSINDX',
  INSRINDX: 'INSRINDX',
  DMGDINDX: 'DMGDINDX',
  ITMTSHID: 'ITMTSHID',
  IVITMTXB: 'IVITMTXB',
  BKTSLSAM: 'BKTSLSAM',
  ORBKTSLS: 'ORBKTSLS',
  TAXAMNT: 'TAXAMNT',
  ORTAXAMT: 'ORTAXAMT',
  TXBTXAMT: 'TXBTXAMT',
  OTAXTAMT: 'OTAXTAMT',
  BSIVCTTL: 'BSIVCTTL',
  TRDISAMT: 'TRDISAMT',
  ORTDISAM: 'ORTDISAM',
  DISCSALE: 'DISCSALE',
  ORDAVSLS: 'ORDAVSLS',
  QUANTITY: 'QUANTITY',
  ATYALLOC: 'ATYALLOC',
  QTYINSVC: 'QTYINSVC',
  QTYINUSE: 'QTYINUSE',
  QTYDMGED: 'QTYDMGED',
  QTYRTRND: 'QTYRTRND',
  QTYONHND: 'QTYONHND',
  QTYCANCE: 'QTYCANCE',
  QTYCANOT: 'QTYCANOT',
  QTYONPO: 'QTYONPO',
  QTYORDER: 'QTYORDER',
  QTYPRBAC: 'QTYPRBAC',
  QTYPRBOO: 'QTYPRBOO',
  QTYPRINV: 'QTYPRINV',
  QTYPRORD: 'QTYPRORD',
  QTYPRVRECVD: 'QTYPRVRECVD',
  QTYRECVD: 'QTYRECVD',
  QTYREMAI: 'QTYREMAI',
  QTYREMBO: 'QTYREMBO',
  QTYTBAOR: 'QTYTBAOR',
  QTYTOINV: 'QTYTOINV',
  QTYTORDR: 'QTYTORDR',
  QTYFULFI: 'QTYFULFI',
  QTYSLCTD: 'QTYSLCTD',
  QTYBSUOM: 'QTYBSUOM',
  EXTQTYAL: 'EXTQTYAL',
  EXTQTYSEL: 'EXTQTYSEL',
  ReqShipDate: 'ReqShipDate',
  FUFILDAT: 'FUFILDAT',
  ACTLSHIP: 'ACTLSHIP',
  SHIPMTHD: 'SHIPMTHD',
  SALSTERR: 'SALSTERR',
  SLPRSNID: 'SLPRSNID',
  PRCLEVEL: 'PRCLEVEL',
  COMMNTID: 'COMMNTID',
  BRKFLD1: 'BRKFLD1',
  BRKFLD2: 'BRKFLD2',
  BRKFLD3: 'BRKFLD3',
  CURRNIDX: 'CURRNIDX',
  TRXSORCE: 'TRXSORCE',
  SOPLNERR: 'SOPLNERR',
  ORGSEQNM: 'ORGSEQNM',
  ITEMCODE: 'ITEMCODE',
  PURCHSTAT: 'PURCHSTAT',
  DECPLQTY: 'DECPLQTY',
  DECPLCUR: 'DECPLCUR',
  ODECPLCU: 'ODECPLCU',
  QTYTOSHP: 'QTYTOSHP',
  XFRSHDOC: 'XFRSHDOC',
  EXCEPTIONALDEMAND: 'EXCEPTIONALDEMAND',
  TAXSCHID: 'TAXSCHID',
  TXSCHSRC: 'TXSCHSRC',
  PRSTADCD: 'PRSTADCD',
  ShipToName: 'ShipToName',
  CNTCPRSN: 'CNTCPRSN',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIPCODE: 'ZIPCODE',
  CCode: 'CCode',
  COUNTRY: 'COUNTRY',
  PHONE1: 'PHONE1',
  PHONE2: 'PHONE2',
  PHONE3: 'PHONE3',
  FAXNUMBR: 'FAXNUMBR',
  Flags: 'Flags',
  BackoutTradeDisc: 'BackoutTradeDisc',
  OrigBackoutTradeDisc: 'OrigBackoutTradeDisc',
  GPSFOINTEGRATIONID: 'GPSFOINTEGRATIONID',
  INTEGRATIONSOURCE: 'INTEGRATIONSOURCE',
  INTEGRATIONID: 'INTEGRATIONID',
  CONTNBR: 'CONTNBR',
  CONTLNSEQNBR: 'CONTLNSEQNBR',
  CONTSTARTDTE: 'CONTSTARTDTE',
  CONTENDDTE: 'CONTENDDTE',
  CONTITEMNBR: 'CONTITEMNBR',
  CONTSERIALNBR: 'CONTSERIALNBR',
  BULKPICKPRNT: 'BULKPICKPRNT',
  INDPICKPRNT: 'INDPICKPRNT',
  ISLINEINTRA: 'ISLINEINTRA',
  SOFULFILLMENTBIN: 'SOFULFILLMENTBIN',
  MULTIPLEBINS: 'MULTIPLEBINS',
  Print_Phone_NumberGB: 'Print_Phone_NumberGB',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  ORIGTYPE: 'ORIGTYPE',
  ORIGNUMB: 'ORIGNUMB',
  DOCID: 'DOCID',
  DOCDATE: 'DOCDATE',
  GLPOSTDT: 'GLPOSTDT',
  QUOTEDAT: 'QUOTEDAT',
  QUOEXPDA: 'QUOEXPDA',
  ORDRDATE: 'ORDRDATE',
  INVODATE: 'INVODATE',
  BACKDATE: 'BACKDATE',
  RETUDATE: 'RETUDATE',
  ReqShipDate: 'ReqShipDate',
  FUFILDAT: 'FUFILDAT',
  ACTLSHIP: 'ACTLSHIP',
  DISCDATE: 'DISCDATE',
  DUEDATE: 'DUEDATE',
  REPTING: 'REPTING',
  TRXFREQU: 'TRXFREQU',
  TIMEREPD: 'TIMEREPD',
  TIMETREP: 'TIMETREP',
  DYSTINCR: 'DYSTINCR',
  DTLSTREP: 'DTLSTREP',
  DSTBTCH1: 'DSTBTCH1',
  DSTBTCH2: 'DSTBTCH2',
  USDOCID1: 'USDOCID1',
  USDOCID2: 'USDOCID2',
  DISCFRGT: 'DISCFRGT',
  ORDAVFRT: 'ORDAVFRT',
  DISCMISC: 'DISCMISC',
  ORDAVMSC: 'ORDAVMSC',
  DISAVAMT: 'DISAVAMT',
  ORDAVAMT: 'ORDAVAMT',
  DISCRTND: 'DISCRTND',
  ORDISRTD: 'ORDISRTD',
  DISTKNAM: 'DISTKNAM',
  ORDISTKN: 'ORDISTKN',
  DSCPCTAM: 'DSCPCTAM',
  DSCDLRAM: 'DSCDLRAM',
  ORDDLRAT: 'ORDDLRAT',
  DISAVTKN: 'DISAVTKN',
  ORDATKN: 'ORDATKN',
  PYMTRMID: 'PYMTRMID',
  PRCLEVEL: 'PRCLEVEL',
  LOCNCODE: 'LOCNCODE',
  BCHSOURC: 'BCHSOURC',
  BACHNUMB: 'BACHNUMB',
  CUSTNMBR: 'CUSTNMBR',
  CUSTNAME: 'CUSTNAME',
  CSTPONBR: 'CSTPONBR',
  PROSPECT: 'PROSPECT',
  MSTRNUMB: 'MSTRNUMB',
  PCKSLPNO: 'PCKSLPNO',
  PICTICNU: 'PICTICNU',
  MRKDNAMT: 'MRKDNAMT',
  ORMRKDAM: 'ORMRKDAM',
  PRBTADCD: 'PRBTADCD',
  PRSTADCD: 'PRSTADCD',
  CNTCPRSN: 'CNTCPRSN',
  ShipToName: 'ShipToName',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIPCODE: 'ZIPCODE',
  CCode: 'CCode',
  COUNTRY: 'COUNTRY',
  PHNUMBR1: 'PHNUMBR1',
  PHNUMBR2: 'PHNUMBR2',
  PHONE3: 'PHONE3',
  FAXNUMBR: 'FAXNUMBR',
  COMAPPTO: 'COMAPPTO',
  COMMAMNT: 'COMMAMNT',
  OCOMMAMT: 'OCOMMAMT',
  CMMSLAMT: 'CMMSLAMT',
  ORCOSAMT: 'ORCOSAMT',
  NCOMAMNT: 'NCOMAMNT',
  ORNCMAMT: 'ORNCMAMT',
  SHIPMTHD: 'SHIPMTHD',
  TRDISAMT: 'TRDISAMT',
  ORTDISAM: 'ORTDISAM',
  TRDISPCT: 'TRDISPCT',
  SUBTOTAL: 'SUBTOTAL',
  ORSUBTOT: 'ORSUBTOT',
  REMSUBTO: 'REMSUBTO',
  OREMSUBT: 'OREMSUBT',
  EXTDCOST: 'EXTDCOST',
  OREXTCST: 'OREXTCST',
  FRTAMNT: 'FRTAMNT',
  ORFRTAMT: 'ORFRTAMT',
  MISCAMNT: 'MISCAMNT',
  ORMISCAMT: 'ORMISCAMT',
  TXENGCLD: 'TXENGCLD',
  TAXEXMT1: 'TAXEXMT1',
  TAXEXMT2: 'TAXEXMT2',
  TXRGNNUM: 'TXRGNNUM',
  TAXSCHID: 'TAXSCHID',
  TXSCHSRC: 'TXSCHSRC',
  BSIVCTTL: 'BSIVCTTL',
  FRTSCHID: 'FRTSCHID',
  FRTTXAMT: 'FRTTXAMT',
  ORFRTTAX: 'ORFRTTAX',
  FRGTTXBL: 'FRGTTXBL',
  MSCSCHID: 'MSCSCHID',
  MSCTXAMT: 'MSCTXAMT',
  ORMSCTAX: 'ORMSCTAX',
  MISCTXBL: 'MISCTXBL',
  BKTFRTAM: 'BKTFRTAM',
  ORBKTFRT: 'ORBKTFRT',
  BKTMSCAM: 'BKTMSCAM',
  ORBKTMSC: 'ORBKTMSC',
  BCKTXAMT: 'BCKTXAMT',
  OBTAXAMT: 'OBTAXAMT',
  TXBTXAMT: 'TXBTXAMT',
  OTAXTAMT: 'OTAXTAMT',
  TAXAMNT: 'TAXAMNT',
  ORTAXAMT: 'ORTAXAMT',
  ECTRX: 'ECTRX',
  DOCAMNT: 'DOCAMNT',
  ORDOCAMT: 'ORDOCAMT',
  PYMTRCVD: 'PYMTRCVD',
  ORPMTRVD: 'ORPMTRVD',
  DEPRECVD: 'DEPRECVD',
  ORDEPRVD: 'ORDEPRVD',
  CODAMNT: 'CODAMNT',
  ORCODAMT: 'ORCODAMT',
  ACCTAMNT: 'ACCTAMNT',
  ORACTAMT: 'ORACTAMT',
  SALSTERR: 'SALSTERR',
  SLPRSNID: 'SLPRSNID',
  UPSZONE: 'UPSZONE',
  TIMESPRT: 'TIMESPRT',
  PSTGSTUS: 'PSTGSTUS',
  VOIDSTTS: 'VOIDSTTS',
  ALLOCABY: 'ALLOCABY',
  NOTEINDX: 'NOTEINDX',
  CURNCYID: 'CURNCYID',
  CURRNIDX: 'CURRNIDX',
  RATETPID: 'RATETPID',
  EXGTBLID: 'EXGTBLID',
  XCHGRATE: 'XCHGRATE',
  DENXRATE: 'DENXRATE',
  EXCHDATE: 'EXCHDATE',
  TIME1: 'TIME1',
  RTCLCMTD: 'RTCLCMTD',
  MCTRXSTT: 'MCTRXSTT',
  TRXSORCE: 'TRXSORCE',
  SOPHDRE1: 'SOPHDRE1',
  SOPHDRE2: 'SOPHDRE2',
  SOPLNERR: 'SOPLNERR',
  SOPHDRFL: 'SOPHDRFL',
  COMMNTID: 'COMMNTID',
  REFRENCE: 'REFRENCE',
  POSTEDDT: 'POSTEDDT',
  PTDUSRID: 'PTDUSRID',
  USER2ENT: 'USER2ENT',
  CREATDDT: 'CREATDDT',
  MODIFDT: 'MODIFDT',
  Tax_Date: 'Tax_Date',
  APLYWITH: 'APLYWITH',
  WITHHAMT: 'WITHHAMT',
  SHPPGDOC: 'SHPPGDOC',
  CORRCTN: 'CORRCTN',
  SIMPLIFD: 'SIMPLIFD',
  DOCNCORR: 'DOCNCORR',
  SEQNCORR: 'SEQNCORR',
  SALEDATE: 'SALEDATE',
  EXCEPTIONALDEMAND: 'EXCEPTIONALDEMAND',
  Flags: 'Flags',
  SOPSTATUS: 'SOPSTATUS',
  SHIPCOMPLETE: 'SHIPCOMPLETE',
  DIRECTDEBIT: 'DIRECTDEBIT',
  WorkflowApprStatCreditLm: 'WorkflowApprStatCreditLm',
  WorkflowPriorityCreditLm: 'WorkflowPriorityCreditLm',
  WorkflowApprStatusQuote: 'WorkflowApprStatusQuote',
  WorkflowPriorityQuote: 'WorkflowPriorityQuote',
  Workflow_Status: 'Workflow_Status',
  ContractExchangeRateStat: 'ContractExchangeRateStat',
  Print_Phone_NumberGB: 'Print_Phone_NumberGB',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.InvoiceDetailScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  LNITMSEQ: 'LNITMSEQ',
  CMPNTSEQ: 'CMPNTSEQ',
  ITEMNMBR: 'ITEMNMBR',
  ITEMDESC: 'ITEMDESC',
  NONINVEN: 'NONINVEN',
  DROPSHIP: 'DROPSHIP',
  UOFM: 'UOFM',
  LOCNCODE: 'LOCNCODE',
  UNITCOST: 'UNITCOST',
  ORUNTCST: 'ORUNTCST',
  UNITPRCE: 'UNITPRCE',
  ORUNTPRC: 'ORUNTPRC',
  XTNDPRCE: 'XTNDPRCE',
  OXTNDPRC: 'OXTNDPRC',
  REMPRICE: 'REMPRICE',
  OREPRICE: 'OREPRICE',
  EXTDCOST: 'EXTDCOST',
  OREXTCST: 'OREXTCST',
  MRKDNAMT: 'MRKDNAMT',
  ORMRKDAM: 'ORMRKDAM',
  MRKDNPCT: 'MRKDNPCT',
  MRKDNTYP: 'MRKDNTYP',
  INVINDX: 'INVINDX',
  CSLSINDX: 'CSLSINDX',
  SLSINDX: 'SLSINDX',
  MKDNINDX: 'MKDNINDX',
  RTNSINDX: 'RTNSINDX',
  INUSINDX: 'INUSINDX',
  INSRINDX: 'INSRINDX',
  DMGDINDX: 'DMGDINDX',
  ITMTSHID: 'ITMTSHID',
  IVITMTXB: 'IVITMTXB',
  BKTSLSAM: 'BKTSLSAM',
  ORBKTSLS: 'ORBKTSLS',
  TAXAMNT: 'TAXAMNT',
  ORTAXAMT: 'ORTAXAMT',
  TXBTXAMT: 'TXBTXAMT',
  OTAXTAMT: 'OTAXTAMT',
  BSIVCTTL: 'BSIVCTTL',
  TRDISAMT: 'TRDISAMT',
  ORTDISAM: 'ORTDISAM',
  DISCSALE: 'DISCSALE',
  ORDAVSLS: 'ORDAVSLS',
  QUANTITY: 'QUANTITY',
  ATYALLOC: 'ATYALLOC',
  QTYINSVC: 'QTYINSVC',
  QTYINUSE: 'QTYINUSE',
  QTYDMGED: 'QTYDMGED',
  QTYRTRND: 'QTYRTRND',
  QTYONHND: 'QTYONHND',
  QTYCANCE: 'QTYCANCE',
  QTYCANOT: 'QTYCANOT',
  QTYORDER: 'QTYORDER',
  QTYPRBAC: 'QTYPRBAC',
  QTYPRBOO: 'QTYPRBOO',
  QTYPRINV: 'QTYPRINV',
  QTYPRORD: 'QTYPRORD',
  QTYPRVRECVD: 'QTYPRVRECVD',
  QTYRECVD: 'QTYRECVD',
  QTYREMAI: 'QTYREMAI',
  QTYREMBO: 'QTYREMBO',
  QTYTBAOR: 'QTYTBAOR',
  QTYTOINV: 'QTYTOINV',
  QTYTORDR: 'QTYTORDR',
  QTYFULFI: 'QTYFULFI',
  QTYSLCTD: 'QTYSLCTD',
  QTYBSUOM: 'QTYBSUOM',
  EXTQTYAL: 'EXTQTYAL',
  EXTQTYSEL: 'EXTQTYSEL',
  ReqShipDate: 'ReqShipDate',
  FUFILDAT: 'FUFILDAT',
  ACTLSHIP: 'ACTLSHIP',
  SHIPMTHD: 'SHIPMTHD',
  SALSTERR: 'SALSTERR',
  SLPRSNID: 'SLPRSNID',
  PRCLEVEL: 'PRCLEVEL',
  COMMNTID: 'COMMNTID',
  BRKFLD1: 'BRKFLD1',
  BRKFLD2: 'BRKFLD2',
  BRKFLD3: 'BRKFLD3',
  CURRNIDX: 'CURRNIDX',
  TRXSORCE: 'TRXSORCE',
  SOPLNERR: 'SOPLNERR',
  DOCNCORR: 'DOCNCORR',
  ORGSEQNM: 'ORGSEQNM',
  ITEMCODE: 'ITEMCODE',
  PURCHSTAT: 'PURCHSTAT',
  DECPLQTY: 'DECPLQTY',
  DECPLCUR: 'DECPLCUR',
  ODECPLCU: 'ODECPLCU',
  EXCEPTIONALDEMAND: 'EXCEPTIONALDEMAND',
  TAXSCHID: 'TAXSCHID',
  TXSCHSRC: 'TXSCHSRC',
  PRSTADCD: 'PRSTADCD',
  ShipToName: 'ShipToName',
  CNTCPRSN: 'CNTCPRSN',
  ADDRESS1: 'ADDRESS1',
  ADDRESS2: 'ADDRESS2',
  ADDRESS3: 'ADDRESS3',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIPCODE: 'ZIPCODE',
  CCode: 'CCode',
  COUNTRY: 'COUNTRY',
  PHONE1: 'PHONE1',
  PHONE2: 'PHONE2',
  PHONE3: 'PHONE3',
  FAXNUMBR: 'FAXNUMBR',
  Flags: 'Flags',
  CONTNBR: 'CONTNBR',
  CONTLNSEQNBR: 'CONTLNSEQNBR',
  CONTSTARTDTE: 'CONTSTARTDTE',
  CONTENDDTE: 'CONTENDDTE',
  CONTITEMNBR: 'CONTITEMNBR',
  CONTSERIALNBR: 'CONTSERIALNBR',
  ISLINEINTRA: 'ISLINEINTRA',
  Print_Phone_NumberGB: 'Print_Phone_NumberGB',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.RMOpenTransactionsScalarFieldEnum = {
  CUSTNMBR: 'CUSTNMBR',
  CPRCSTNM: 'CPRCSTNM',
  DOCNUMBR: 'DOCNUMBR',
  CHEKNMBR: 'CHEKNMBR',
  BACHNUMB: 'BACHNUMB',
  BCHSOURC: 'BCHSOURC',
  TRXSORCE: 'TRXSORCE',
  RMDTYPAL: 'RMDTYPAL',
  CSHRCTYP: 'CSHRCTYP',
  CBKIDCRD: 'CBKIDCRD',
  CBKIDCSH: 'CBKIDCSH',
  CBKIDCHK: 'CBKIDCHK',
  DUEDATE: 'DUEDATE',
  DOCDATE: 'DOCDATE',
  POSTDATE: 'POSTDATE',
  PSTUSRID: 'PSTUSRID',
  GLPOSTDT: 'GLPOSTDT',
  LSTEDTDT: 'LSTEDTDT',
  LSTUSRED: 'LSTUSRED',
  ORTRXAMT: 'ORTRXAMT',
  CURTRXAM: 'CURTRXAM',
  SLSAMNT: 'SLSAMNT',
  COSTAMNT: 'COSTAMNT',
  FRTAMNT: 'FRTAMNT',
  MISCAMNT: 'MISCAMNT',
  TAXAMNT: 'TAXAMNT',
  COMDLRAM: 'COMDLRAM',
  CASHAMNT: 'CASHAMNT',
  DISTKNAM: 'DISTKNAM',
  DISAVAMT: 'DISAVAMT',
  DISAVTKN: 'DISAVTKN',
  DISCRTND: 'DISCRTND',
  DISCDATE: 'DISCDATE',
  DSCDLRAM: 'DSCDLRAM',
  DSCPCTAM: 'DSCPCTAM',
  WROFAMNT: 'WROFAMNT',
  TRXDSCRN: 'TRXDSCRN',
  CSPORNBR: 'CSPORNBR',
  SLPRSNID: 'SLPRSNID',
  SLSTERCD: 'SLSTERCD',
  DINVPDOF: 'DINVPDOF',
  PPSAMDED: 'PPSAMDED',
  GSTDSAMT: 'GSTDSAMT',
  DELETE1: 'DELETE1',
  AGNGBUKT: 'AGNGBUKT',
  VOIDSTTS: 'VOIDSTTS',
  VOIDDATE: 'VOIDDATE',
  TAXSCHID: 'TAXSCHID',
  CURNCYID: 'CURNCYID',
  PYMTRMID: 'PYMTRMID',
  SHIPMTHD: 'SHIPMTHD',
  TRDISAMT: 'TRDISAMT',
  SLSCHDID: 'SLSCHDID',
  FRTSCHID: 'FRTSCHID',
  MSCSCHID: 'MSCSCHID',
  NOTEINDX: 'NOTEINDX',
  Tax_Date: 'Tax_Date',
  APLYWITH: 'APLYWITH',
  SALEDATE: 'SALEDATE',
  CORRCTN: 'CORRCTN',
  SIMPLIFD: 'SIMPLIFD',
  Electronic: 'Electronic',
  ECTRX: 'ECTRX',
  BKTSLSAM: 'BKTSLSAM',
  BKTFRTAM: 'BKTFRTAM',
  BKTMSCAM: 'BKTMSCAM',
  BackoutTradeDisc: 'BackoutTradeDisc',
  Factoring: 'Factoring',
  DIRECTDEBIT: 'DIRECTDEBIT',
  ADRSCODE: 'ADRSCODE',
  EFTFLAG: 'EFTFLAG',
  DEX_ROW_TS: 'DEX_ROW_TS',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.SalesTaxesWorkHistoryScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  LNITMSEQ: 'LNITMSEQ',
  TAXDTLID: 'TAXDTLID',
  ACTINDX: 'ACTINDX',
  BKOUTTAX: 'BKOUTTAX',
  TXABLETX: 'TXABLETX',
  STAXAMNT: 'STAXAMNT',
  ORSLSTAX: 'ORSLSTAX',
  FRTTXAMT: 'FRTTXAMT',
  ORFRTTAX: 'ORFRTTAX',
  MSCTXAMT: 'MSCTXAMT',
  ORMSCTAX: 'ORMSCTAX',
  TAXDTSLS: 'TAXDTSLS',
  ORTOTSLS: 'ORTOTSLS',
  TDTTXSLS: 'TDTTXSLS',
  ORTXSLS: 'ORTXSLS',
  TXDTOTTX: 'TXDTOTTX',
  OTTAXPON: 'OTTAXPON',
  DELETE1: 'DELETE1',
  CURRNIDX: 'CURRNIDX',
  TRXSORCE: 'TRXSORCE',
  TXDTLPCTAMT: 'TXDTLPCTAMT',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.KHistoryScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  PRCHLDID: 'PRCHLDID',
  DELETE1: 'DELETE1',
  USERID: 'USERID',
  HOLDDATE: 'HOLDDATE',
  TIME1: 'TIME1',
  TRXSORCE: 'TRXSORCE',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.UserDefinedWorkHistoryScalarFieldEnum = {
  SOPTYPE: 'SOPTYPE',
  SOPNUMBE: 'SOPNUMBE',
  USRDAT01: 'USRDAT01',
  USRDAT02: 'USRDAT02',
  USRTAB01: 'USRTAB01',
  USRTAB09: 'USRTAB09',
  USRTAB03: 'USRTAB03',
  USERDEF1: 'USERDEF1',
  USERDEF2: 'USERDEF2',
  USRDEF03: 'USRDEF03',
  USRDEF04: 'USRDEF04',
  USRDEF05: 'USRDEF05',
  COMMENT_1: 'COMMENT_1',
  COMMENT_2: 'COMMENT_2',
  COMMENT_3: 'COMMENT_3',
  COMMENT_4: 'COMMENT_4',
  DEX_ROW_ID: 'DEX_ROW_ID',
  CMMTTEXT: 'CMMTTEXT'
};

exports.Prisma.ExtendedPricingPriceBookWorkScalarFieldEnum = {
  PRCBKID: 'PRCBKID',
  PRODTCOD: 'PRODTCOD',
  LINKCODE: 'LINKCODE',
  SEQNUMBR: 'SEQNUMBR',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.SysdiagramsScalarFieldEnum = {
  name: 'name',
  principal_id: 'principal_id',
  diagram_id: 'diagram_id',
  version: 'version',
  definition: 'definition'
};

exports.Prisma.RatesScalarFieldEnum = {
  EXGTBLID: 'EXGTBLID',
  CURNCYID: 'CURNCYID',
  EXCHDATE: 'EXCHDATE',
  TIME1: 'TIME1',
  XCHGRATE: 'XCHGRATE',
  EXPNDATE: 'EXPNDATE',
  DEX_ROW_ID: 'DEX_ROW_ID'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Client: 'Client',
  ClientAccounts: 'ClientAccounts',
  ClientsEmail: 'ClientsEmail',
  Proforma: 'Proforma',
  ProformaDetail: 'ProformaDetail',
  Invoice: 'Invoice',
  InvoiceDetail: 'InvoiceDetail',
  RMOpenTransactions: 'RMOpenTransactions',
  SalesTaxesWorkHistory: 'SalesTaxesWorkHistory',
  KHistory: 'KHistory',
  UserDefinedWorkHistory: 'UserDefinedWorkHistory',
  ExtendedPricingPriceBookWork: 'ExtendedPricingPriceBookWork',
  sysdiagrams: 'sysdiagrams',
  Rates: 'Rates'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
